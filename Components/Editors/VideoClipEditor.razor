@using FFMpegCore
@using FFMpegCore.Pipes
@using FFmpegBlazor
@using MudBlazor
@using MudBlazor.Utilities
@using SkiaSharp
@using SubtitleEditor.SectionDef
@inject IJSRuntime Runtime
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="StartingHH" TextChanged="@OnATextChanged" Label="hours" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="1000" />
     </MudItem>
     <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="StartingMM" TextChanged="@OnATextChanged" Label="minutes" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="59" />
     </MudItem>
     <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="StartingSS" TextChanged="@OnATextChanged" Label="seconds" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="59" />
     </MudItem>
     <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="StartingFF" TextChanged="@OnATextChanged" Label="frame" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="29" />
     </MudItem>
     <MudItem md="12" Class="py-0">
         <MudText GutterBottom="true">Start Time</MudText>
     </MudItem>
     <MudDivider DividerType="DividerType.FullWidth" />
     <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="@DurationHH" TextChanged="@OnATextChanged" Label="hours" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="1000" />
     </MudItem>
     <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="@DurationMM" TextChanged="@OnATextChanged" Label="minutes" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="59" />
     </MudItem>
     <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="DurationSS" TextChanged="@OnATextChanged" Label="seconds" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="59" />
     </MudItem>
     <MudItem md="3" Class="py-0">
         <MudNumericField @bind-Value="DurationFF" TextChanged="@OnATextChanged" Label="frame" Immediate="true"  Variant="Variant.Filled" Min="0.0" Max="29" />
     </MudItem>
     <MudItem md="12" Class="py-0">
         <MudText GutterBottom="true">Duration</MudText>
     </MudItem>
     <MudDivider DividerType="DividerType.FullWidth" />
    <MudItem md="6" Class="py-0">
        <MudSlider T="float" Value="@XPosition" ValueChanged="@OnXPositionChanged" Immediate=true Min="0" Max="100">Horizontal Position</MudSlider>
    </MudItem>
    <MudItem md="6" Class="py-0">
        <MudSlider T="float" Value="@YPosition" ValueChanged="@OnYPositionChanged" Immediate=true Min="0" Max="100">Vertical Position</MudSlider>
    </MudItem>
    <MudItem md="6" Class="py-0">
        <MudSlider T="float" Value="@Size" ValueChanged="@OnSizeChanged" Immediate=true Min="1" Max="300">Size</MudSlider>
    </MudItem>
    <MudDivider DividerType="DividerType.FullWidth" />
    <MudItem md="6" Class="py-0">
        <MudSelect @bind-Value="@BlendMode" TextChanged="@OnATextChanged" Label="Blend Mode" Variant="Variant.Outlined">
            @foreach (var bm in blendModes)
            {
                <MudSelectItem Value="@bm.Key">@bm.Value</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem md="6" Class="py-0">
        <MudSlider T="int" Value="@Opacity" ValueChanged="@OnOpacityChanged" Immediate=true Min="0" Max="255">Opacity</MudSlider>
    </MudItem>

    <MudItem md="6" Class="py-0">
        <MudSelect @bind-Value="@StretchingMode" TextChanged="@OnATextChanged" Label="Blend Mode" Variant="Variant.Outlined">
            @foreach (var sm in stretchingModes)
            {
                <MudSelectItem Value="@sm.Key">@sm.Value</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    
    @if (!string.IsNullOrEmpty(SelectedVideo))
    {
        <MudItem md="12" Class="py-0">
            <video width="100%" height="200px" autoplay controls src="@SelectedVideo" />
        </MudItem>
    }
    <MudItem md="12" Class="py-0">
        <MudFileUpload T="IBrowserFile" Accept=".mov, .avi, .mp4, .webm" FilesChanged="VideoUploaderFilesSelected">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                Variant="Variant.Outlined"
                Color="Color.Primary"
                Disabled="converting"
                for="@context.Id">
                    Upload Video <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Title="Favorite" />
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudItem>
    @if (converting)
    {
        <MudItem md="12" Class="py-0">
            <MudProgressLinear Color="Color.Primary" Indeterminate="conversionProgress <= 0 || conversionProgress >= 100" Value="@conversionProgress" Class="my-7" />
        </MudItem>
        <MudItem md="12" Class="py-0">
            @progressDescription
        </MudItem>
    }
</MudGrid>
@inject ISnackbar Snackbar
@code {
    [Parameter]
    public string? SelectedVideo { get; set; }
    [Parameter]
    public SKBitmap[]? SelectedVideoData { get; set; }
    [Parameter]
    public float Size { get; set; }
    [Parameter]
    public SKBlendMode BlendMode { get; set; } = SKBlendMode.SrcOver;
    [Parameter]
    public StretchingModes StretchingMode { get; set; } = StretchingModes.Clip;
    [Parameter]
    public int Opacity { get; set; } = 255;
    [Parameter]
    public float XPosition { get; set; }
    [Parameter]
    public float YPosition { get; set; }
    [Parameter] 
    public double StartingHH { get; set; }    
    [Parameter] 
    public double StartingMM { get; set; }    
    [Parameter] 
    public double StartingSS { get; set; }    
    [Parameter] 
    public double StartingFF { get; set; }    
    [Parameter] 
    public double DurationHH { get; set; }    
    [Parameter] 
    public double DurationMM { get; set; }    
    [Parameter] 
    public double DurationSS { get; set; }    
    [Parameter] 
    public double DurationFF { get; set; }
    [Parameter]
    public EventCallback<VideoClipEditor> OnAChange { get; set; }
    System.Text.StringBuilder FFLog = new System.Text.StringBuilder();
    protected async Task OnATextChanged(string d)
    {
        await OnAChange.InvokeAsync(this);
    }
    private async Task OnXPositionChanged(float value) // Ensure correct casing (OnValueChanged)
    {
        XPosition = value;
        await OnAChange.InvokeAsync(this);
    }

    private async Task OnYPositionChanged(float value) // Ensure correct casing (OnValueChanged)
    {
        YPosition = value;
        await OnAChange.InvokeAsync(this);
    }
    private async Task OnSizeChanged(float value) // Ensure correct casing (OnValueChanged)
    {
        Size = value;
        await OnAChange.InvokeAsync(this);
    }

    // Video Processing
    public static FFmpegBlazor.FFMPEG FFMpeg;
    bool converting { get; set; } = false;
    float conversionProgress { get; set; } = 0;
    string progressDescription = "";
    protected override async Task OnInitializedAsync()
    {

    }



    Dictionary<SKBlendMode, string> blendModes = new Dictionary<SKBlendMode, string>
    {
    {SKBlendMode.SrcOver,"Normal"},
    {SKBlendMode.ColorDodge, "Color Dodge"},
    {SKBlendMode.Multiply, "Multiply"},
    {SKBlendMode.ColorBurn, "Color Burn"},
    {SKBlendMode.Difference, "Differnce"},
    {SKBlendMode.Screen, "Screen"},
    {SKBlendMode.Exclusion, "Excluion"},
    {SKBlendMode.Darken, "Darken" }
    }; 
    public enum StretchingModes
    {
        Clip,
        Stretch,
        Loop
    }
    Dictionary<StretchingModes, string> stretchingModes = new Dictionary<StretchingModes, string>
    {
    {StretchingModes.Clip,"Clip"},
    {StretchingModes.Stretch, "Stretch"},
    {StretchingModes.Loop, "Loop"},
    };
    private async Task OnOpacityChanged(int value) // Ensure correct casing (OnValueChanged)
    {
        Opacity = value;
        await OnAChange.InvokeAsync(this);
    }
    protected async Task<List<SKBitmap>> ConvertPNGsToSKBitmaps(int totalFrames, string dir, string frameSeed, int indexChars, string extension)
    {
        var frames = new List<SKBitmap>();
        for (int i = 1; i <= totalFrames; i++)
        {
            var f = Path.Combine(dir, frameSeed + i.ToString().PadLeft(indexChars, '0') + extension);
            progressDescription = "Converting frame " + i + " of " + totalFrames;
            conversionProgress = (int)((i / (float)totalFrames) * 100);
            InvokeAsync(() => StateHasChanged());

            try
            {
                var bmp = SkiaSharp.SKBitmap.Decode(f);
                frames.Add(bmp);
            }
            catch (Exception ex)
            {
                break;
            }
        }
        return frames;
    }
    protected async Task VideoUploaderFilesSelected(IBrowserFile file)
    {
        converting = true;

        InvokeAsync(() => { StateHasChanged(); });
        var ms = new MemoryStream();
        int totalFrames = 0;
        var ffmpegTemp = "FFMpeg/temp";
        if (Directory.Exists(ffmpegTemp))
            Directory.CreateDirectory(ffmpegTemp);
        var framesIndexSize = 4;
        var framesExtension = ".png";
        var framesSeed = Path.GetFileNameWithoutExtension(file.Name) + "_frame_";
        var outputFiles = Path.Combine(ffmpegTemp, $"{framesSeed}%0{framesIndexSize}d.png");
        var binInfo = new FFMpegCore.FFOptions()
            {
                BinaryFolder = "FFMpeg/bin",
                TemporaryFilesFolder = ffmpegTemp
            };
        try
        {
            using (var stream = new MemoryStream())
            {
                await file.OpenReadStream(200000000).CopyToAsync(stream);
                stream.Seek(0, SeekOrigin.Begin);
                var info = await FFProbe.AnalyseAsync(stream, binInfo);
                totalFrames = (int)Math.Round(info.Duration.TotalSeconds * 30);

                if (totalFrames < 1)
                    throw new Exception("No frames found in the selected video");
                stream.Seek(0, SeekOrigin.Begin);
                var converted = await FFMpegArguments
                    .FromPipeInput(new StreamPipeSource(stream))
                    .OutputToFile(outputFiles, true,
                options => options
                .WithArgument(new FFMpegCore.Arguments.CustomArgument(@"-vf fps=30")))
                .NotifyOnProgress((p) =>
                {
                    var fi = Math.Round((p / 100 * info.Duration).TotalSeconds * 30);
                    progressDescription = $"Extracted frame {fi} of {totalFrames}";
                    conversionProgress = (float)p;
                    InvokeAsync(() => { StateHasChanged(); });

                }, info.Duration)
                .ProcessAsynchronously(true, binInfo);
                if (file.ContentType.Contains("video/"))
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    SelectedVideo = $"data:{file.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";
                }

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("There was an error processing the video: " + ex, Severity.Error);
            converting = false;
            InvokeAsync(() => { StateHasChanged(); });
            return;
        }
        InvokeAsync(() => { StateHasChanged(); });

        // We have our PNGs in the drive. We don't need to load all of them to memory. 
        // But lets try loading them first as SKBitmaps.

        SelectedVideoData = (await ConvertPNGsToSKBitmaps(totalFrames, ffmpegTemp, framesSeed, framesIndexSize, framesExtension)).ToArray();

        await OnAChange.InvokeAsync(this);
        converting = false;
    }
}
